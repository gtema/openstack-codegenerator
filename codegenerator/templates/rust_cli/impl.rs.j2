{%- import 'rust_macros.j2' as macros with context -%}
{{ macros.mod_docstring(command_description) }}
use async_trait::async_trait;
use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;
use http::Response;
{%- if not result_def %}
use http::{HeaderName, HeaderValue};
use bytes::Bytes;
{%- endif %}

use anyhow::Result;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OutputConfig;
use crate::StructTable;
use crate::{Command, error::OpenStackCliError};
use structable_derive::StructTable;
use std::fmt;

use openstack_sdk::{AsyncOpenStack, types::ServiceType};

{% for mod in additional_imports | sort %}
use {{ mod }};
{%- endfor %}

/// Command arguments
#[derive(Args, Clone, Debug)]
pub struct {{ target_class_name }}Args {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

{% include "rust_cli/parameters.j2" %}

{% if operation_type == "list" and "limit" in type_manager.get_parameters("query")|list|map(attribute=0) %}
    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t=10000)]
    max_items: usize
{%- endif %}

{% if operation_type == "download" %}
    /// Destination filename (using "-" will print object to stdout)
    #[arg(long)]
    file: Option<String>,
{% elif operation_type == "upload" %}
    /// Source filename (using "-" will read object from stdout)
    #[arg(long)]
    file: Option<String>,
{%- endif %}

}
{% include "rust_cli/query_parameters.j2" %}
{% include "rust_cli/path_parameters.j2" %}

{%- for type in type_manager.get_subtypes() %}
{%- if type["variants"] is defined %}
{{ macros.docstring(type.description, indent=0) }}
#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd, ValueEnum)]
enum {{ type.name }} {
  {%- for k in type.variants.keys()|sort %}
    {{ k }},
  {%- endfor %}
}

{%- elif type["base_type"] == "struct" %}
/// {{ type.name }} Body data
#[derive(Args, Debug, Clone)]
{%- if type["is_group"] is defined and type.is_group %}
#[group(required={{ type.is_required | lower }}, multiple={{ "true" if type.__class__.__name__ != "EnumGroupStruct" else "false" }})]
{%- endif %}
struct {{ type.name }} {
  {%- for field in type.fields.values() %}
    {{ macros.docstring(field.description, indent=4) }}
    {{ field.clap_macros_ext(is_group=type.is_group) }}
    {{ field.local_name }}: {{ field.type_hint }},
  {%- endfor %}
}
{%- endif %}
{% endfor %}

/// {{ target_class_name }} {{ operation_type }} command
pub struct {{ target_class_name }}Cmd {
    pub args: {{ target_class_name }}Args,
}

{%- include 'rust_cli/response_struct.j2' %}

#[async_trait]
impl Command for {{ target_class_name }}Cmd {
    async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("{{ operation_type | title }} {{ target_class_name }} with {:?}", self.args);

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;
        info!("Parsed args: {:?}", self.args);

  {%- if operation_type == "download" and is_image_download %}
      {%- include 'rust_cli/impl_image_download.j2' %}
  {%- else %}

    {% if find_present and operation_type in ["show", "set", "download"] %}
      {#- find the resource #}
        let mut find_builder = find::{{ sdk_struct_name  }}::builder();
        {{ macros.set_cli_path_parameters(type_manager, "find_builder", find_mode=True) }}
        {%- if microversion %}
        find_builder.header("OpenStack-API-Version", "{{ "volume" if service_type == "block-storage" else service_type }} {{ microversion }}");
        {%- endif %}
        let find_ep = find_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let find_data: serde_json::Value = find(find_ep).query_async(client).await?;
    {%- endif %}

    {%- if not is_json_patch and (operation_type != "show" or not find_present) %}
        let mut ep_builder = {{ sdk_mod_path[-1] }}::Request::builder();
      {%- if microversion %}
        ep_builder.header("OpenStack-API-Version", "{{ "volume" if service_type == "block-storage" else service_type }} {{ microversion }}");
      {%- endif %}
      {{ macros.set_cli_path_parameters(type_manager, "ep_builder") }}
      {% include 'rust_cli/set_query_parameters.j2' %}
      {% include 'rust_cli/set_body_parameters.j2' %}

      {%- if operation_type == "upload" and body_types|length == 1 and body_types[0] != "*/*" %}
        // The only supported media type
        ep_builder.header("content-type", "{{ body_types[0] }}");
      {%- endif %}

        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
    {%- endif %}

    {# Response #}
    {%- with data_type = response_type_manager.get_root_data_type() %}


    {%- if (data_type.__class__.__name__ == "StructResponse" and data_type.fields or (data_type.tuple_fields is defined and data_type.tuple_fields)) or (data_type.__class__.__name__ == "HashMapResponse") %}
    {#- there is result structure meand we can render response #}

      {%- if operation_type == "list" %}
        {% include 'rust_cli/invoke_list.j2' %}

      {%- elif operation_type in ["show"] %}
       {#- Show/get implementation #}
       {%- if find_present %}
        op.output_single::<ResponseData>(find_data)?;
       {%- else %}
        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
       {%- endif %}

      {%- elif operation_type == "create" %}
        {% include 'rust_cli/invoke_create.j2' %}

      {%- elif operation_type == "set" and method == "patch" and is_json_patch %}
{#- Patch implementation #}
        {% include 'rust_cli/invoke_patch.j2' %}
      {%- else %}
         {%- if result_is_list %}
          let data: Vec<serde_json::Value> = ep.query_async(client).await?;
          op.output_list::<ResponseData>(data)?;
         {%- else %}
          let data = ep.query_async(client).await?;
          op.output_single::<ResponseData>(data)?;
         {%- endif %}
      {%- endif %}
    {%- elif operation_type not in ["delete", "download", "upload", "json"] %}
      {#- there is no result structure - raw mode #}
        let rsp: Response<Bytes> = ep.raw_query_async(client).await?;

      {%- if resource_header_metadata %}
       {#- metadata from headers for now can be only returned when there is no response struct #}
        let mut metadata: HashMap<String, String> = HashMap::new();
        let headers = rsp.headers();

        let mut regexes: Vec<Regex> = vec![
        {%- for hdr, spec in resource_header_metadata.items() %}
        {%- if "*" in hdr %}
            Regex::new(r"(?i){{ hdr | replace("*", "\.*") }}").unwrap(),
        {%- endif %}
        {%- endfor %}
        ];

        for (hdr, val) in headers.iter() {
            if [
              {%- for hdr, spec in resource_header_metadata.items() %}
              {%- if not "*" in hdr %}
                "{{ hdr | lower }}",
              {%- endif %}
              {%- endfor %}
            ].contains(&hdr.as_str()) {
                metadata.insert(
                    hdr.to_string(),
                    val.to_str().unwrap_or_default().to_string());
            } else if !regexes.is_empty() {
                for rex in regexes.iter() {
                    if rex.is_match(hdr.as_str()) {
                        metadata.insert(
                            hdr.to_string(),
                            val.to_str().unwrap_or_default().to_string());
                    }
                }
            }
        }
        let data = ResponseData {metadata: metadata.into()};
      {%- else %}
        let data = ResponseData {};
      {%- endif %}
        // Maybe output some headers metadata
        op.output_human::<ResponseData>(&data)?;
    {%- elif operation_type == "delete" %}
        let rsp: Response<Bytes> = ep.raw_query_async(client).await?;
    {%- elif operation_type == "download" %}
      {%- include 'rust_cli/invoke_download.j2' %}

    {%- elif operation_type == "upload" %}
      {%- include 'rust_cli/invoke_upload.j2' %}
    {%- elif operation_type == "json" %}
        let rsp: Response<Bytes> = ep.raw_query_async(client).await?;
        let data: serde_json::Value = serde_json::from_slice(rsp.body())?;
        op.output_machine(data)?;
    {%- endif %}

{%- endwith %}
{%- endif %} {#- specialities #}
        Ok(())
    }
}
