{%- import 'rust_macros.j2' as macros with context -%}
{{ macros.mod_docstring(command_description) }}
use async_trait::async_trait;
use clap::Args;
use serde::{Deserialize, Serialize};
use tracing::info;
use http::Response;
{%- if not result_def %}
use http::{HeaderName, HeaderValue};
use bytes::Bytes;
{%- endif %}

use anyhow::Result;

use crate::output::OutputProcessor;
use crate::Cli;
use crate::OutputConfig;
use crate::StructTable;
use crate::{Command, error::OpenStackCliError};
use structable_derive::StructTable;
use std::fmt;

use openstack_sdk::{AsyncOpenStack, types::ServiceType};

{% for mod in additional_imports | sort %}
use {{ mod }};
{%- endfor %}

{{ macros.docstring(command_description, indent=0) }}
#[derive(Args, Clone, Debug)]
pub struct {{ target_class_name }}Args {
    /// Request Query parameters
    #[command(flatten)]
    query: QueryParameters,

    /// Path parameters
    #[command(flatten)]
    path: PathParameters,

{% include "rust_cli/parameters.j2" %}

{% if operation_type == "list" and "limit" in type_manager.get_parameters("query")|list|map(attribute=0) %}
    /// Total limit of entities count to return. Use this when there are too many entries.
    #[arg(long, default_value_t=10000)]
    max_items: usize
{%- endif %}

{% if operation_type == "download" %}
    /// Destination filename (using "-" will print object to stdout)
    #[arg(long)]
    file: Option<String>,
{% elif operation_type == "upload" %}
    /// Source filename (using "-" will read object from stdout)
    #[arg(long)]
    file: Option<String>,
{%- endif %}

}

{%- include "rust_cli/query_parameters.j2" %}
{%- include "rust_cli/path_parameters.j2" %}

{%- for type in type_manager.get_subtypes() %}
{%- if type["variants"] is defined %}
{{ macros.docstring(type.description, indent=0) }}
#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
enum {{ type.name }} {
  {%- for k, v in type.variants.items() %}
    {{ k }},
  {%- endfor %}
}

impl fmt::Debug for {{ type.name }} {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}
{%- elif type["base_type"] == "struct" %}
#[derive(Args, Debug, Clone)]
{% if type["is_group"] is defined and type.is_group %}
#[group(required={{ type.is_required | lower }}, multiple=false)]
{%- endif %}
struct {{ type.name }} {
  {%- for field in type.fields.values() %}
    {{ macros.docstring(field.description, indent=4) }}
    {{ field.clap_macros }}
    {{ field.local_name }}: {{ field.type_hint }},
  {%- endfor %}
}
{%- endif %}
{% endfor %}

pub struct {{ target_class_name }}Cmd {
    pub args: {{ target_class_name }}Args,
}

{%- include 'rust_cli/response_struct.j2' %}

#[async_trait]
impl Command for {{ target_class_name }}Cmd {
    async fn take_action(
        &self,
        parsed_args: &Cli,
        client: &mut AsyncOpenStack,
    ) -> Result<(), OpenStackCliError> {
        info!("{{ method | title }} {{ target_class_name }} with {:?}", self.args);

        let op = OutputProcessor::from_args(parsed_args);
        op.validate_args(parsed_args)?;
        info!("Parsed args: {:?}", self.args);

      {%- if operation_type == "show" and "id" in result_def.keys() | list %}
        let mut ep_builder = find::{{ sdk_struct_name  }}::builder();
      {%- elif operation_type == "set" and method == "patch" %}
        let mut ep_builder = find::{{ sdk_struct_name }}::builder();
      {%- else %}
        let mut ep_builder = {{ sdk_mod_path[-1] }}::Request::builder();
      {%- endif %}
      {% include 'rust_cli/set_path_parameters.j2' %}
      {% include 'rust_cli/set_query_parameters.j2' %}
      {% include 'rust_cli/set_body_parameters.j2' %}

{%- if operation_type == "upload" and body_types|length == 1 and body_types[0] != "*/*" %}
        // The only supported media type
        ep_builder.header("content-type", "{{ body_types[0] }}");
{%- endif %}
        let ep = ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;

{%- if sdk_service_name not in ["object", "object-store"] %}
        client.discover_service_endpoint(&ServiceType::{{ sdk_service_name }}).await?;
{%- endif %}

{%- with data_type = response_type_manager.get_root_data_type() %}
    {%- if data_type %}
    {#- there is result structure #}
      {%- if operation_type == "list" %}
{#- List operation #}
    {%- if "limit" in type_manager.get_parameters("query")|list|map(attribute=0) %}
    {#- paginated list #}
        let data: Vec<serde_json::Value> = paged(ep, Pagination::Limit(self.args.max_items)).query_async(client).await?;
    {%- else %}
        let data: Vec<serde_json::Value> = ep.query_async(client).await?;
    {%- endif %}

        op.output_list::<ResponseData>(data)?;

      {%- elif operation_type == "show" and "id" in result_def.keys() | list %}
{#- Show/find implementation #}
        let data = find(ep).query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
      {%- elif operation_type == "show" %}
{#- Show/get implementation #}
        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
      {%- elif operation_type == "set" and method == "patch" %}
{#- Patch implementation #}
        // Patching resource requires fetching and calculating diff
        let data: Response = find(ep).query_async(client).await?;
        let mut new = data.clone();
        {% for k, v in patch_params.items() %}
        if let Some(val) = &self.args.{{ v.local_name }} {
          {%- if v.type == "Option<Vec<String>>" %}
            new.{{ v.local_name }} = Some(VecString(val.clone()));
          {%- elif v.type in ["Option<bool>", "Option<u32>", "Option<f32>"]%}
            new.{{ v.local_name }} = Some(*val);
          {%- elif "Option" in v.type %}
            new.{{ v.local_name }} = Some(val.into());
          {%- else %}
            new.{{ v.local_name }} = *val;
          {%- endif %}
        }
        {%- endfor %}

        let curr_json = serde_json::to_value(&data).unwrap();
        let new_json = serde_json::to_value(&new).unwrap();
        let patch = diff(&curr_json, &new_json);

        let mut patch_ep_builder = {{ method }}::{{ sdk_struct_name }}::builder();
        patch_ep_builder.id(&data.id);
        patch_ep_builder.patch(patch);

        let patch_ep = patch_ep_builder
            .build()
            .map_err(|x| OpenStackCliError::EndpointBuild(x.to_string()))?;
        let new_data = patch_ep.query_async(client).await?;
        op.output_single::<ResponseData>(new_data)?;

      {%- else %}
        let data = ep.query_async(client).await?;
        op.output_single::<ResponseData>(data)?;
      {%- endif %}
    {%- elif operation_type not in ["delete", "download", "upload", "json"] %}
      {#- there is no result structure - raw mode #}
        let rsp: Response<Bytes> = ep.raw_query_async(client).await?;

      {%- if resource_header_metadata %}
       {#- metadata from headers for now can be only returned when there is no response struct #}
        let mut metadata: HashMap<String, String> = HashMap::new();
        let headers = rsp.headers();

        let mut regexes: Vec<Regex> = vec![
        {%- for hdr, spec in resource_header_metadata.items() %}
        {%- if "*" in hdr %}
            Regex::new(r"(?i){{ hdr | replace("*", "\.*") }}").unwrap(),
        {%- endif %}
        {%- endfor %}
        ];

        for (hdr, val) in headers.iter() {
            if [
              {%- for hdr, spec in resource_header_metadata.items() %}
              {%- if not "*" in hdr %}
                "{{ hdr | lower }}",
              {%- endif %}
              {%- endfor %}
            ].contains(&hdr.as_str()) {
                metadata.insert(
                    hdr.to_string(),
                    val.to_str().unwrap_or_default().to_string());
            } else if !regexes.is_empty() {
                for rex in regexes.iter() {
                    if rex.is_match(hdr.as_str()) {
                        metadata.insert(
                            hdr.to_string(),
                            val.to_str().unwrap_or_default().to_string());
                    }
                }
            }
        }
        let data = ResponseData {metadata: metadata.into()};
      {%- else %}
        let data = ResponseData {};
      {%- endif %}
        // Maybe output some headers metadata
        op.output_human::ResponseData>(&data)?;
    {%- elif operation_type == "delete" %}
        let rsp: Response<Bytes> = ep.raw_query_async(client).await?;
    {%- elif operation_type == "download" %}
      {%- include 'rust_cli/invoke_download.j2' %}

    {%- elif operation_type == "upload" %}
        let dst = self.args.file.clone();
        let data = build_upload_asyncread(dst).await?;

        let _rsp: Response<Bytes> = ep.raw_query_read_body_async(client, data).await?;
        // TODO: what if there is an interesting response
    {%- elif operation_type == "json" %}
        let rsp: Response<Bytes> = ep.raw_query_async(client).await?;
        let data: serde_json::Value = serde_json::from_slice(rsp.body())?;
        op.output_machine(data)?;
    {%- endif %}

{%- endwith %}
        Ok(())
    }
}
