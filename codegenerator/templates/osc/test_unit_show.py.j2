#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#

from unittest import mock

from {{ sdk_mod_name }} import {{ class_name }}
from openstack.tests.unit import fakes as sdk_fakes

from {{ osc_mod_name }} import show
from openstackclient.tests.unit import utils as tests_utils


class Test{{ class_name }}(tests_utils.TestCommand):

    def setUp(self):
        super().setUp()

        # SDK mock
        self.app.client_manager.sdk_connection = mock.Mock()
        self.app.client_manager.sdk_connection.{{ sdk_service_name }} = mock.Mock()
        self.sdk_client = self.app.client_manager.sdk_connection
        self.app.client_manager.sdk_connection.search_resources = mock.Mock()


class Test{{ class_name }}Show(Test{{ class_name }}):

    _fake = sdk_fakes.get_fake_resource({{ class_name }})

    columns = (
{%- for (k, _) in attrs.items() %}
        "{{ k }}",
{%- endfor %}
    )

    data = (
{%- for (k, _) in attrs.items() %}
        _fake.{{ k }},
{%- endfor %}
    )

    def setUp(self):
        super().setUp()

        self.api_mock = mock.Mock()
        self.api_mock.side_effect = [[self._fake], [], ]

        self.sdk_client.search_resources = self.api_mock

        # Get the command object to test
        self.cmd = show.Show{{ class_name }}(self.app, None)

    def test_show_no_options(self):

        arglist = []
        verifylist = []

        # Missing required args should boil here
        self.assertRaises(
            tests_utils.ParserException, self.check_parser,
            self.cmd, arglist, verifylist)

    def test_show_basic(self):
        arglist = ["res_id"]
        verifylist = [
            ("{{ class_name | lower }}", "res_id")
        ]

        parsed_args = self.check_parser(self.cmd, arglist, verifylist)

        # In base command class Lister in cliff, abstract method take action()
        # returns a tuple containing the column names and an iterable
        # containing the data to be listed.
        columns, data = self.cmd.take_action(parsed_args)

        self.sdk_client.search_resources.assert_called_with(
            resource_type="{{ registry_name }}",
            filters=None,
            name_or_id="res_id"
        )

        self.assertEqual(self.columns, columns)
        self.assertEqual(self.data, tuple(data))

